multiple:
  - tool_id: "eslint:curly"
    extensions: ["js"]
    tags: ["JavaScript"]
    default_weight: 100
    command: 'eslint --fix "#{filename}" --no-eslintrc --env "es6" --env "node" --parser-options "{ecmaVersion: 2018}" --rule "{curly: \"error\"}"'

  - tool_id: "typescript-eslint:curly"
    extensions: ["js", "ts"]
    tags: ["JavaScript", "TypeScript"]
    default_weight: 300 # prefer eslint and tslint over this
    command: 'eslint --fix "#{filename}"  --parser "@typescript-eslint/parser" --plugin "@typescript-eslint" --rule "{@typescript-eslint/curly: \"error\"}"'

  - tool_id: "tslint:curly"
    extensions: ["js", "ts"]
    tags: ["JavaScript", "TypeScript"]
    default_weight: 200 # let eslint rules run first

    command: 'echo "{\"jsRules\":{\"curly\":true},\"rules\":{\"curly\":true}}" > /c3pr/temp/tslint.json && tslint --fix -c /c3pr/temp/tslint.json "#{filename}"'

pr_title: Braces for if/for/do/while statements
pr_body: |
  JavaScript allows the omission of curly braces when a block contains only one statement. However, it is considered by many to be best
  practice to _never_ omit curly braces around blocks, even when they are optional, because it can lead to bugs and reduces code clarity.

  Consider the example:

  ```js
  if (foo === bar)
      foo++;
      bar++;
  ```

  In the code above, the author almost certainly meant for both `foo++` and `bar++` to be executed only if `foo === bar`.
  However, they forgot braces and `bar++` will be executed no matter what. This rule could prevent such a mistake.

  This way, the snippet above should have been written as:

  ```js
  if (foo === bar) {
      foo++;
      bar++;
  }
  ```

  More info: https://eslint.org/docs/rules/curly https://palantir.github.io/tslint/rules/curly/
